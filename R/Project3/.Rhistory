}
y
install.package(KernSmooth)
install.packages(KernSmooth)
install.packages(KernSmooth)
install.packages("KernSmooth")
library(KernSmooth)
debug(ls)
ls()
exit
quit
quit()
end
run
r
nn
nn
quit()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(c(1,2,3,4,5))
w = makeVector(c(1,2,3,4,5))
w
w$get
w$get()
cachemean(x)
cachemean(w)
w$getmean(w)
w$getmean()
?solve
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
setMatrix <- function(y) {
x <<- y
inverse <<- NULL
}
getMatrix <- function() x
setInverse <- function(inverseMatrix) inverse <<- inverseMatrix
getInverse <- function() inverse
list(setMatrix = setMatrix, getMatrix = getMatrix,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
inverse <- x$getInverse()
if(!is.null(inverse)) {
message("Getting cached inverse matrix")
return(inverse)
}
matrix <- x$getMatrix()
inverse <- solve(matrix, ...)
x$setInverse(inverse)
inverse
}
m <- matrix(1:4,2,2)
m
makeCacheMatrix(m)
newM <- makeCacheMatrix(m)
newM
newM$getMatrix()
cacheSolve(newM)
newM$getInverse()
n = newM$getInverse()
n
newN = makeCacheMatrix(n)
cacheSolve(newN)
cacheSolve(newN)
m <- matrix(1:4,2,2)
a <- solve(m)
b <- a %*% m
a
b
m
m <- matrix(c(2,4,8,16),2,2)
a <- solve(m)
m
a <- solve(m)
m <- matrix(c(2,4,8,9),2,2)
a <- solve(m)
a
b
b <- a %*% m
b
ls
ls()
m <- matrix(1:1000,5,200)
m
str(m)
>str
?str
f <- gl(50,10)
str(f)
summary(f)
library(datasets)
summary(airquality)
str(airquality)
m
str(m)
s <- split(airquality, airquality$Dat)
s <- split(airquality, airquality$Date)
s <- split(airquality, airquality$Day)
s
str(s)
summary(s)
?rapply
qnorm(m)
dnorm(m)
set.seed(100)
rnorm(3)
rnorm(3)
set.seed(100)
rnorm(3)
sample(1:10)
sample(1:10)
sample(1:10)
system.time(ls())
system.time(rnorm(1:10000000)
)
system.time(rnorm(1:100000000000000))
system.time(rnorm(1:1000000000000)
)
system.time(rnorm(1:1000000000))
)
system.time(readLines("http://www.jhsph.edu"))
system.time(readLines("http://www.google.com"))
system.time(readLines("http://www.msn.com"))
Rprof()
?Rprog
?Rprof
lm()
lm(y = 2x, m)
lm(y == x, m)
lm(1, m)
summaryRprof
summaryRprof()
summary(m)
summaryRprof()
Rprof(summary(m))
summary(1:10000000000)
summary(1:1000000000)
summary(1:100000000)
summaryRprof()
?summaryRprof
set.seed(1)
rpois(5, 2)
?ppois
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
?rbinom
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
y = c(1:10)
x1 = c(10:1)
x2 = c(2:11)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof
summaryRprof()
y = c(1:10000)
x1 = c(10000:1)
x2 = c(2:10001)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
fit
y = c(1:1000000)
x1 = c(1000000:1)
x2 = c(2:1000001)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
set.seed(1)
rpois(5, 2)
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data[, 11] <- as.numeric(data[, 11])
data[, 17] <- as.numeric(data[, 17])
data[, 23] <- as.numeric(data[, 23])
setwd("C:/Users/crham_000/TestDir/Project3")
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data[, 11] <- as.numeric(data[, 11])
data[, 17] <- as.numeric(data[, 17])
data[, 23] <- as.numeric(data[, 23])
colN <- 11
unique(data$State)
unique(data$State)
?for
;
?data.frame
state <- sort(unique(data$State))
state
hospital <- string(100)
hospital <- c(100)
c
hospital
hospital <- character(100)
hospital
hospital[1] = "Grambling"
hospital
numStates <- Length(state)
hospital <- character(numStates)
state <- sort(unique(data$State))
numStates <- Length(state)
hospital <- character(numStates)
?length
numStates <- length(state)
hospital <- character(numStates)
hospital
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data[, 11] <- as.numeric(data[, 11])
data[, 17] <- as.numeric(data[, 17])
data[, 23] <- as.numeric(data[, 23])
if(outcome %in% c("heart attack", "heart failure", "pneumonia")) {}
else { stop("invalid outcome")}
if(num == "best") { num <- 1}
## For each state, find the hospital of the given rank
state <- sort(unique(data$State))
numStates <- length(state)
hospital <- character(numStates)
switch(outcome,
"heart attack" = {colN <- 11},
"heart failure" = {colN <- 17},
"pneumonia" = {colN <- 23})
for(i in numStates) {
stateData <- data[which(data[,"State"] == state[i]),]
ranks <- stateData[order(stateData[,colN], stateData[,"Hospital.Name"],na.last = NA),]
if(num == "worst") { selected <- tail(ranks, n = 1)[,"Hospital.Name"] }
else {
if(num <= length(ranks)) { selected <- ranks[num, "Hospital.Name"] }
else { selected = NA }
}
hospital[i] <- selected
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
allRanks <- data.frame(hospital, state)
allRanks
}
head(rankall("heart attack", 20), 10)
stateData <- data[which(data[,"State"] == "AL"),]
ranks <- stateData[order(stateData[,colN], stateData[,"Hospital.Name"],na.last = NA),]
if(num == "worst") { selected <- tail(ranks, n = 1)[,"Hospital.Name"] }
num = 20
if(num <= length(ranks)) { selected <- ranks[num, "Hospital.Name"] }
selected
hospital[i] <- selected
i<-2
hospital[i] <- selected
hospital
allRanks <- data.frame(hospital, state)
allRanks
allRanks <- data.frame(hospital, state)
allRanks <- data.frame(hospital, state)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data[, 11] <- as.numeric(data[, 11])
data[, 17] <- as.numeric(data[, 17])
data[, 23] <- as.numeric(data[, 23])
if(outcome %in% c("heart attack", "heart failure", "pneumonia")) {}
else { stop("invalid outcome")}
if(num == "best") { num <- 1}
## For each state, find the hospital of the given rank
state <- sort(unique(data$State))
numStates <- length(state)
hospital <- character(numStates)
switch(outcome,
"heart attack" = {colN <- 11},
"heart failure" = {colN <- 17},
"pneumonia" = {colN <- 23})
for(i in numStates) {
stateData <- data[which(data[,"State"] == state[i]),]
ranks <- stateData[order(stateData[,colN], stateData[,"Hospital.Name"],na.last = NA),]
if(num == "worst") { selected <- tail(ranks, n = 1)[,"Hospital.Name"] }
else {
if(num <= length(ranks)) { selected <- ranks[num, "Hospital.Name"] }
else { selected = NA }
}
hospital[i] <- selected
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
allRanks <- data.frame(hospital, state)
allRanks
}
head(rankall("heart attack", 20), 10)
rankall("heart attack", 20)
debug(rankall("heart attack", 20))
debug(rankall
)
debug(rankall)
rankall("heart attack", 20)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data[, 11] <- as.numeric(data[, 11])
data[, 17] <- as.numeric(data[, 17])
data[, 23] <- as.numeric(data[, 23])
if(outcome %in% c("heart attack", "heart failure", "pneumonia")) {}
else { stop("invalid outcome")}
if(num == "best") { num <- 1}
## For each state, find the hospital of the given rank
state <- sort(unique(data$State))
numStates <- length(state)
hospital <- character(numStates)
switch(outcome,
"heart attack" = {colN <- 11},
"heart failure" = {colN <- 17},
"pneumonia" = {colN <- 23})
for(i in 1:numStates) {
stateData <- data[which(data[,"State"] == state[i]),]
ranks <- stateData[order(stateData[,colN], stateData[,"Hospital.Name"],na.last = NA),]
if(num == "worst") { selected <- tail(ranks, n = 1)[,"Hospital.Name"] }
else {
if(num <= length(ranks)) { selected <- ranks[num, "Hospital.Name"] }
else { selected = NA }
}
hospital[i] <- selected
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
allRanks <- data.frame(hospital, state)
allRanks
}
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
source("submitscript3.R")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
rankall("heart failure", 1)
rankall("heart failure", "Worst")
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data[, 11] <- as.numeric(data[, 11])
data[, 17] <- as.numeric(data[, 17])
data[, 23] <- as.numeric(data[, 23])
## Check that state and outcome are valid
if(state %in% unique(data$State)) {}
else { stop("invalid state")}
if(outcome %in% c("heart attack", "heart failure", "pneumonia")) {}
else { stop("invalid outcome")}
if(num == "best") { num <- 1}
## Return hospital name in that state with the given rank
## 30-day death rate
switch(outcome,
"heart attack" = {colN <- 11},
"heart failure" = {colN <- 17},
"pneumonia" = {colN <- 23})
stateData <- data[which(data[,"State"] == state),]
ranks <- stateData[order(stateData[,colN], stateData[,"Hospital.Name"],na.last = NA),]
if(num == "worst") { hospital <- tail(ranks, n = 1)[,"Hospital.Name"] }
else {
if(num <= length(ranks)) { hospital <- ranks[num, "Hospital.Name"] }
else { hospital = NA }
}
hospital
}
rankhospital("AL", "heart failure", "worst")
rankall("heart failure", "Worst")
debug(rankall)
rankall("heart failure", "Worst")
q
rankall("heart failure", "worst")
?debug
debug(rankall, on = FALSE)
rankall("heart failure", "Worst")
debug(on=FALSE)
undebug(rankall)
rankall("heart failure", "Worst")
rankall("heart failure", "worst")
install.packages("swirl")
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0, 10, by=0.5)
my_seq <-seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lappy(flag_colors, sum)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals(flags, unique)
unique_vals<-lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plant)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1),100, replace = TRUE)
flipts <- sample(c(0,1),100, replace = TRUE, prob =c(0.3,0.7))
flips <- sample(c(0,1),100, replace = TRUE, prob =c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean =100, sd = 25)
rpois(5, mean=10)
?rpois
(rpois,10)
rpois(5,10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
